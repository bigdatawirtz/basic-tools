{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Basic Tools for Big Data","text":"<p>Basic tools for classroom work.</p>"},{"location":"#tools","title":"Tools","text":"<ul> <li>WSL</li> <li>Git / Github</li> <li>Docker</li> <li>Markdown</li> <li>SSH</li> <li>Python</li> <li>Markdown</li> <li>YAML</li> <li>OpenStack</li> </ul>"},{"location":"#deprecated","title":"Deprecated","text":"<ul> <li>Virtualbox</li> <li>Vagrant</li> </ul>"},{"location":"docker/","title":"Docker","text":"<p>Install instructions at the end of the document.</p>"},{"location":"docker/#commands","title":"Commands","text":"<ul> <li><code>docker pull [image-name]</code>: Download an image to run containers from the default repository hub.docker.com</li> <li><code>docker run [image-name]</code>: Create a container from the indicated image</li> <li><code>docker ps</code>: View the running containers</li> <li><code>docker ps -a</code>: View all created containers </li> <li><code>docker stop [container-name]</code>: Stop the indicated container</li> <li><code>docker start [container-name]</code>: Start the indicated container</li> <li><code>docker rm [container-name]</code>: Remove the indicated container</li> <li><code>docker exec [container-name] /path/executable</code>: run a executable file from inside the container (sample: docker exec -it container-name bash)</li> </ul>"},{"location":"docker/#images","title":"Images","text":"<ul> <li><code>docker image ls</code>: view downloaded images</li> <li><code>docker image rm [image-name]</code>: remove image-name image</li> </ul>"},{"location":"docker/#network","title":"Network","text":"<ul> <li><code>docker network ls</code>: show created networks</li> <li><code>docker network create [network-name]</code>: create a new network</li> </ul>"},{"location":"docker/#volumes","title":"Volumes","text":"<p>Docker has many ways to work with persistence.</p> <p>You can bindmount a local folder to share data between your host and the container: * <code>docker run -v /path-to-localfolder:/path-to-containerfolder [image-name]</code></p> <p>You can create a docker volume to persist data and allow acces from the container: * <code>docker run -v volume-name:/path-to-containerfolder [image-name]</code></p>"},{"location":"docker/#docker-compose","title":"Docker Compose","text":"<p>You can use predefined container orquestrations with docker-compose. A docker-compose.yml is a YAML file where you can describe your microservices architechture with code.</p> <ul> <li><code>docker compose up -d</code>: dowload required images from docker hub and then launch all containers defined in the yaml file. (-d for --detach mode)</li> <li><code>docker compose down</code>: destroy the current orquestration and stops all the defined services </li> </ul> <p>docker-compose.yml (sample)</p> <pre><code>version: '3'\n\nservices:\n   db:\n     image: mysql:5.7\n     volumes:\n       - db_data:/var/lib/mysql\n     restart: always\n     environment:\n       MYSQL_ROOT_PASSWORD: somewordpress\n       MYSQL_DATABASE: wordpress\n       MYSQL_USER: wordpress\n       MYSQL_PASSWORD: wordpress\n\n   wordpress:\n     depends_on:\n       - db\n     image: wordpress:latest\n     ports:\n       - \"8000:80\"\n     restart: always\n     environment:\n       WORDPRESS_DB_HOST: db:3306\n       WORDPRESS_DB_USER: wordpress\n       WORDPRESS_DB_PASSWORD: wordpress\nvolumes:\n    db_data:\n</code></pre>"},{"location":"docker/#installing","title":"Installing","text":""},{"location":"docker/#windows","title":"Windows","text":"<p>Docker is a linux technology so you need to install WSL in order to use docker over Windows.</p> <p>After installing WSL in Windows, download and install Docker Desktop.</p> <ol> <li>Download Docker Desktop</li> <li>Install Docker Desktop (admin privileges needed)</li> </ol> <p>Docker Desktop install process adds the user who runs the installation to the docker-users local group. Add new users to that group if you want to allow them to run docker desktop.</p>"},{"location":"docker/#gnulinux","title":"GNU/Linux","text":"<p>https://docs.docker.com/engine/install/ubuntu/</p> <ol> <li>Set up Docker's apt repository.</li> </ol> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <ol> <li>Install the Docker packages.</li> </ol> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <ol> <li>Verify that the Docker Engine installation is successful by running the hello-world image.</li> </ol> <pre><code>sudo docker run hello-world\n</code></pre> <ol> <li> <p>Manage Docker as a non-root user</p> <ol> <li>Create docker group (if neccesary):  <code>sudo groupadd docker</code></li> <li>Add your user to the docker group:  <code>sudo usermod -aG docker $USER</code></li> </ol> </li> <li> <p>Verify that you can run containers from your own user:</p> </li> </ol> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/#how-to-mount-your-own-registry","title":"How to mount your own Registry","text":"<p>We use to get docker images from hub.docker.com, the main repository offered by docker.com but it is possible to moutn our own local Registry.</p> <p>In this tutorial we are going to launch a minimal insecure Registry:</p> <p>Create new registry host name_host (or ip_host) 1. Launch a registry image</p> <pre><code>docker run -d -p 5000:5000 --name my-registry registry:2\n</code></pre> <p>Client host - Configure client to user insecure registries</p> <ol> <li>Create/Edit /etc/docker/daemon.json</li> </ol> <pre><code>{\n        \"insecure-registries\": [\"name_host/ip_host:5000\"]\n}\n</code></pre> <ol> <li> <p>Restart docker service</p> <p>sudo systemctl restart docker</p> </li> </ol> <p>Client host - Upload new image to registry 1. Download a sample image from hub.docker.com</p> <pre><code>docker pull busybox\n</code></pre> <ol> <li> <p>Tag the image pointing to the new repository </p> <p>docker image tag busybox name_host:5000/new-busybox 3. Push the new image to the private registry</p> <p>docker push name_host:5000/new-busybox 4. Verify the new added image</p> <p>curl http://name_host:5000/v2/_catalog</p> </li> </ol> <p>Another client host - Download image from private registry 1. Download image</p> <pre><code>docker pull name_host:5000/new-busybox\n</code></pre> <ol> <li> <p>Launch container</p> <p>docker run name_host:5000/new-busybox</p> </li> </ol>"},{"location":"git/","title":"Git","text":"<p>Git is a control version software (CVS).</p>"},{"location":"git/#commands","title":"Commands","text":"<p>Basic commands</p> <ul> <li><code>git init</code>: Initialize a local repository in current directory.</li> <li><code>git add .</code>: Add all modified files from current directory to the stage area.</li> <li><code>git commit -m</code>: Commit all changes in current stage area to the repo.</li> <li><code>git status</code>: Show the working tree status</li> <li><code>git log</code>: Show commit logs</li> <li><code>git checkout commit-id</code>: Moves to the indicated commit</li> </ul> <p>Remote repositories</p> <ul> <li><code>git clone [repo-url]</code>: Clone remote repository in local filesystem.</li> <li><code>git push</code>: Upload changes to remote repository</li> <li><code>git pull</code>: Download and integrate remote changes into local repository</li> </ul> <p>Configuration</p> <ul> <li><code>git config --list</code>: Show current configuration</li> <li><code>git config var-name=var-value</code>: Set a value for the indicated config variable</li> </ul>"},{"location":"git/#git-first-steps-tutorial","title":"Git first steps tutorial","text":"<ol> <li>Create a new directory to host a repository: <code>mkdir new-repo</code></li> <li>Enter the directory and Initialize new repo: <code>cd new-repo</code> and  <code>git init</code></li> <li>Update configuration (if needed): <code>git config user.name myname</code> + <code>git confit user.email my-email@domain.com</code></li> <li>Verify my current configuration: <code>git config --list</code></li> <li>View repo status: <code>git status</code></li> <li>Create a new file: <code>echo Hi &gt; greetings.txt</code></li> <li>View new status: <code>git status</code></li> <li>Add new file to staging area: <code>git add greetings.txt</code></li> <li>Commit changes to repository: <code>git commit -m 'changes added'</code></li> <li>View status:  <code>git status</code></li> <li>View history log: <code>git log</code></li> <li>Create a new file: <code>echo Bye &gt; goodbye.txt</code></li> <li>View new status: <code>git status</code></li> <li>Add new file to staging area: <code>git add goodbye.txt</code></li> <li>Commit changes to repository: <code>git commit -m 'new file added'</code></li> <li>View status:  <code>git status</code></li> <li>View history log: <code>git log --oneline</code></li> <li>List files: <code>ls</code></li> <li>Move to previous state: <code>git checkout commit-id</code></li> <li>Verify current files in working directory: <code>ls</code></li> <li>View history log: <code>git log --oneline --all</code></li> <li>Back to the 'future': <code>git checkout branch-name (master or main)</code></li> </ol>"},{"location":"git/#git-branches-and-merge","title":"Git branches and merge","text":"<p>You can use branches to manage many lines of develpment independently. To incorporate the content of a new branch in the main branch you have the merge function.</p> <ul> <li><code>git log --oneline --graph</code>; this combination can be useful to understand branches.</li> <li><code>git branch newbranch</code>: create a new branch called newbranch</li> <li><code>git branch</code>: view branches</li> <li><code>git switch newbranch</code>: switches to newbranch</li> <li><code>git merge newbranch</code>: merge newbranch in the current branch</li> </ul>"},{"location":"git/#merge-fast-forward","title":"Merge Fast-Forward","text":"<p>When you create a new branch and you make many commits you can merge this branch into main. If main doesn't have any commits since the new branch creation the merge function will use the Fast-Forward technique. </p> <ol> <li>(main) &gt; <code>git branch newbranch</code></li> <li>(main) &gt; <code>git switch newbranch</code></li> <li>(nova_branch) &gt; <code>touch file1.txt</code></li> <li>(nova_branch) &gt; <code>git add .</code></li> <li>(nova_branch) &gt; <code>git commit -m \"file.txt added\"</code></li> <li>(nova_branch) &gt; <code>switch main</code></li> <li>(main) &gt; <code>git merge nova_branch</code></li> </ol>"},{"location":"git/#merge-three-way-without-conflicts","title":"Merge Three Way (without conflicts)","text":"<p>Merge Three Way without conflicts happen when you merge a new branch with commits and the main branch with commits too. If the commits of the two branches don't involve the same files then there won't be any conflitcs. The merge is automatic.</p> <ol> <li>(main) &gt; <code>git branch newbranch</code></li> <li>(main) &gt; <code>git switch newbranch</code></li> <li>(nova_branch) &gt; <code>touch file1.txt</code></li> <li>(nova_branch) &gt; <code>git add .</code></li> <li>(nova_branch) &gt; <code>git commit -m \"file.txt added\"</code></li> <li>(nova_branch) &gt; <code>git switch main</code></li> <li>(main) &gt; <code>touch file2.txt</code></li> <li>(main) &gt; <code>git add .</code></li> <li>(main) &gt; <code>git commit -m</code></li> <li>(main) &gt; <code>git merge nova_branch</code></li> </ol>"},{"location":"git/#merge-three-way-with-conflicts","title":"Merge Three Way (with conflicts)","text":"<p>Merge Three Way without conflicts happen when you merge a new branch with commits and the main branch with commits too. If the commits of the two branches involve the same files then there will be conflitcs. The merge is not automatic and the user have to decide wich code to save and commit.</p> <ol> <li>(main) &gt; <code>git branch newbranch</code></li> <li>(main) &gt; <code>git switch newbranch</code></li> <li>(nova_branch) &gt; <code>echo \"pan\" &gt; lista_compra.txt</code></li> <li>(nova_branch) &gt; <code>git add .</code></li> <li>(nova_branch) &gt; <code>git commit -m \"pan added\"</code></li> <li>(nova_branch) &gt; <code>switch main</code></li> <li>(main) &gt; <code>echo \"queixo\" &gt; lista_compra.txt</code></li> <li>(main) &gt; <code>git add .</code></li> <li>(main) &gt; <code>git commit -m</code></li> <li>(main) &gt; <code>git merge nova_branch</code></li> <li>Git stops the merge operation and ask the user to resolve the conflicts</li> <li><code>nano lista_compra.txt</code></li> <li>(main) &gt; <code>git add lista_compra.txt</code></li> <li>(main) &gt; <code>git commit -m \"lista da compra completa\"</code></li> </ol>"},{"location":"git/#github","title":"GitHub","text":"<p>GitHub is a platform and cloud-based services for software development and version control using Git. It provides repositories for software developers.</p>"},{"location":"git/#github-first-steps","title":"Github first steps","text":"<p>How to clone a repository from Github, add changes locally and send them back to the remote repository.</p> <ol> <li>Clone the remote repository: <code>git clone git@github.com:some_github_user/repo-name.git</code></li> <li>Enter the local repo directory: <code>cd repo-name</code></li> <li>Add new files or update existing ones</li> <li>Add changes to Stage Area: <code>git add .</code></li> <li>Confirm changes in Stage Area to Repository: <code>git commit -m \"comment\"</code></li> <li>Send changes to remote repository: <code>git push</code></li> </ol> <p>The <code>git push</code> command requires authentication. You need to create an authentication token in the Github web to use as a password in each push operation.</p>"},{"location":"git/#ssh-authentication","title":"SSH Authentication","text":"<p>You can user your RSA SSH public key to authenticate in Github:</p> <ol> <li>Confirm that you're using the right remote: <code>git remote -v</code> . Are your remotes pointing to git@github:username/reponame.git ?</li> <li>Go to your Profile Settings and paste your public RSA public Key in the 'SSH and GPG keys' (New SSH key button).</li> <li>Git will use your default RSA Key in your next <code>push</code> operation.</li> </ol>"},{"location":"git/#github-flows","title":"Github flows","text":"<p>When you code with more people you need to stablish certain rules to coordinate work, this is called a workflow. The are many different workflows, for example:</p> <ul> <li>Feature Branch Workflow: Each new feature or fix should be developed in its own branch. When the feature is complete it gets merged into master (or main). This workflow is good for small teams and projects with few contributors.</li> <li>Gitflow Workflow: It's a more complex workflow that includes multiple branches to support features, releases and hotfixes.</li> </ul> <p>We suggest the following simplified version of the Feature Branch Workflow</p>"},{"location":"git/#a-simple-feature-branch-workflow-for-two","title":"A simple feature branch workflow for two","text":"<p>Create repository on GitHub</p> <p>Clone repository locally</p> <p>Time to work!</p> <p>Create your own branch (<code>git branch new_branch</code>) Switch to your branch (<code>git switch new_branch</code>) Work + Commit + Work + Commit... Return to main (<code>git switch main</code>) Check if there\u2019s anything new on GitHub and bring it to main (<code>git pull</code>) Merge your branch into main (<code>git merge new_branch</code>) Push updated changes to GitHub (<code>git push</code>)</p> <p>Back to \u201cTime to work!\u201d</p> <p>Note: Each time, we use a different branch name: <code>new_branch1</code>, <code>new_branch2</code>, ...</p> <p>If you want, you can push your local branch to the remote repository if it isn't ready to merge with main. The first time you do this you'll have to make a <code>git push --set-upstream origin new_branch</code>. Then just use <code>git push</code> for subsequent pushes.</p>"},{"location":"markdown/","title":"Markdown","text":"<p>Markdown is a lightweight markup language for formatted text using a plain-text editor.</p> <p>Markdown guide</p>"},{"location":"openstack/","title":"Openstack","text":""},{"location":"openstack/#openstack-cli","title":"Openstack CLI","text":"<p>openstack-cli is the command line interpreter to interact with OpenStack from the console. It allows us to automate certain jobs.</p>"},{"location":"openstack/#install","title":"Install","text":"<p>openstack-cli is in the ubuntu default repositories so you can install via apt:</p> <p><code>sudo apt install python3-openstackclient</code></p> <p>Verify you have sucessfully installed openstack-cli executing the main command:</p> <p><code>openstack --version</code></p> <p>You'll se somethin like this:</p> <pre><code>myuser@myhost:~$ openstack --version\nopenstack 5.2.0\n</code></pre>"},{"location":"openstack/#configuration","title":"Configuration","text":"<p>You need to download a configuration file for your account from the OpenStack web interface.</p> <p>Click on the \"OpenStack RC File\" option from the menu of your profile in the web interface and download the configuration file.</p> <p>(optional) Edit the \"OpenStack RC File\". Comment these lines: </p> <pre><code>...\n# echo \"Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: \"\n...\n# export OS_PASSWORD=$OS_PASSWORD_INPUT\n...\n</code></pre> <p>Add this new line (use your own password for the cloud).</p> <pre><code>export OS_PASSWORD=YOUR_PASSWORD\n</code></pre>"},{"location":"openstack/#loading-openstack-cli-configuration","title":"Loading openstack-cli configuration","text":"<p>Every time you open a new terminal you need to execute the \"OpenStack RC File\" to load the configuration.</p> <p><code>source your_openstack_RC_file.sh</code></p> <p>Once the configuration is loaded you can verify the connection to the cloud by listing existing instances:</p> <p><code>openstack server list</code></p> <p>If you can see a list of the current instances on your project then the connection is ready!</p> <p>You can automate the execution of the OpenStack RC File by adding the following line at the end of the bashrc file in your home directory: ~/.bashrc</p> <p><code>... source your_OpenStack_RC_File.sh</code></p> <p>The ~/.bashrc is executed each time you open a new terminal so every new terminals will be configured to connect to your OpenStack account in the cloud.</p>"},{"location":"openstack/#using-openstack-cli","title":"Using openstack-cli","text":""},{"location":"openstack/#create-an-instance-from-command-line","title":"Create an instance from command line","text":"<p>You can launch a new instance providing the main configuration from the CLI:</p> <p><code>openstack server create --image image_name --flavor flavor_name --key-name your_key_name --network network_name --security-group group_name new_instance_name</code></p> <p>For example:</p> <p><code>openstack server create --image baseos-Ubuntu-20.04-v5 --flavor m1.2c2m --key-name if_fulano --network provnet-formacion-vlan-133 --security-group aberto fulano_nova_instancia</code></p> <p>Verify that the new instance was launched:</p> <p><code>openstack server list</code></p> <p>Show details of your instance:</p> <p><code>openstack server show fulano_nova_instancia</code></p> <p>You can delete the new instance by doing:</p> <p><code>openstack server delete fulano_nova_instancia</code></p>"},{"location":"openstack/#create-an-instance-with-script-file","title":"Create an instance with script file","text":"<p>You can launch a new instance providing the main configuration from the CLI and software provisioning via script file:</p> <p><code>openstack server create --user-data script_laboratorio_1.sh --image baseos-Ubuntu-20.04-v2 --flavor m1.2c2m --key-name if_fulano --network provnet-formacion-vlan-133 --security-group aberto fulano_nova_instancia</code></p>"},{"location":"python/","title":"Python","text":""},{"location":"python/#anaconda","title":"Anaconda","text":"<p>Anaconda is an open-source distribution of Python. It comes with the Python interpreter, a package manager and various packages related do data science.</p>"},{"location":"python/#installing","title":"Installing","text":""},{"location":"python/#anaconda_1","title":"Anaconda","text":"<p>Download Anaconda executable and follow the instructions to install Anaconda in your system.</p> <p>https://www.anaconda.com/download</p>"},{"location":"python/#miniconda","title":"Miniconda","text":"<p>Miniconda is a minimal installation of Conda + Python + other userful packages (pip, zlib ...).</p> <p>Install instructions</p> <p>Quick Install</p> <pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash ~/Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <p>Manual installation</p> <pre><code>mkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\n</code></pre> <p>Configure conda autoload:</p> <p><code>~/miniconda3/bin/conda init bash</code></p>"},{"location":"python/#conda","title":"Conda","text":"<p>Conda is the main Anaconda package manager.</p> <ul> <li><code>conda create --name environment-name python=version</code>: create a new environment</li> <li><code>conda activate environment-name</code>: activate the indicated environment</li> <li><code>conda deactivate</code>: deactivate the current environment</li> <li><code>conda env list</code>: list environments</li> <li><code>conda remove -n environment-name --all</code>: delete environment-name</li> <li><code>conda install package-name</code>: install package-name</li> <li><code>conda env export &gt; filename.yml</code>: export current environment</li> <li><code>conda env create --file filename.yml</code>: create new environment from filename.yml</li> </ul>"},{"location":"python/#pip","title":"PIP","text":"<p>pip is the package installer for Python. It allows you to install, update, and manage Python packages and libraries from the Python Package Index (PyPI).</p> <ul> <li><code>conda install pip</code>: install pip if you are in a fresh conda environment</li> <li><code>pip install package-name</code>: install the selected package in the current environment</li> <li><code>pip uninstall package-name</code>: uninstall the selected package from the current environment</li> </ul>"},{"location":"python/#new-project-sample","title":"New Project sample","text":"<p>Imagine that you start a new project with the following requirements:</p> <ul> <li>python interpreter 3.8</li> <li>pyjokes library</li> </ul> <p>You can create a new environment, activate it, install pip, install the required libraries with pip and then execute the script.</p> <pre><code>conda create --name newproject python=3.8\nconda activate newproject\nconda install pip\npip install pyjokes\n</code></pre>"},{"location":"ssh/","title":"Ssh","text":""},{"location":"ssh/#ssh-remote-connection","title":"SSH Remote Connection","text":"<p>SSH allows remote connections between hosts.</p> <ul> <li>Connect to remote server:  <code>ssh user@remote_server</code></li> <li>Connect to remote ssh server on a different port: <code>ssh user@remote_server -pXXX</code></li> </ul>"},{"location":"ssh/#ssh-authentication","title":"SSH authentication","text":"<p>SSH uses an RSA key pair to authenticate users.</p> <ul> <li>Create a RSA key pair: <code>ssh-keygen -t rsa</code>. This command creates a key pair in default diretory .ssh with default names:</li> <li>id_rsa: private key</li> <li>id_rsa.pub: public key</li> <li>Copy public key to server: <code>ssh-copy-id remote-server</code>. This allows automatic authentication using private key.</li> </ul> <p>When you copy your public key (id_rsa.pub) to a remote server, it will be stored in ~/.ssh/authorized_keys. If you can't use commands like ssh-copy-id it is possible to copy yout key directly to that file.</p>"},{"location":"ssh/#connections-config-file","title":"Connections config file","text":"<p>You can use a config file to configure your connections to remote servers. The default config file is .ssh/config</p> <pre><code>Host server_identificator\n  HostName server_name_or_ip\n  User username\n  IdentityFile ~/.ssh/id_rsa #or other private key file\n</code></pre>"},{"location":"ssh/#ssh-tunneling","title":"SSH Tunneling","text":"<p>You can use SSH to redirect remote port from other hosts to local ports. Basic sintax:</p> <p><code>ssh -L local_port:ip_server_cloud:remote_port user_middle_host@middle_host_name</code></p> <p>For example, a tunnel from my local port 8000 to the port 80 in x.y.z.w throught host.middle.com:</p> <p><code>ssh -L 8000:x.y.z.w:80 host.middle.com</code></p>"},{"location":"ssh/#ssh-hop","title":"SSH Hop","text":"<p>Connect a remote host only reachable throug another host:</p> <p><code>ssh -A -t user_aux@aux_host.domain.com ssh destiny_user@destiny_host.domain.com</code></p> <p>Options:</p> <ul> <li>-A: enable forwarding </li> <li>-t: force pseudo-terminal allocation</li> </ul>"},{"location":"vagrant/","title":"Vagrant","text":"<p>Vagrant helps you to create and manage a virtualized environment.</p>"},{"location":"vagrant/#installing","title":"Installing","text":"<p>Vagrant requires a previous VirtualBox installation. </p> <p>Download and install Vagrant from: https://www.vagrantup.com/</p>"},{"location":"vagrant/#commands","title":"Commands","text":"<ul> <li><code>vagrant init</code>: Initialize a Vagranfile.</li> <li><code>vagrant up</code>: Create a virtual machine from Vagratfile.</li> <li><code>vagrant up --debug</code>: verbose debug option</li> <li><code>vagrant ssh</code>: SSH conection to the current virtual machine.</li> <li><code>vagrant suspend</code>: suspends the current machine (save state)</li> <li><code>vagrant resume</code>: resume a suspended vagrant machine</li> <li><code>vagrant halt</code>: shutdown a virtual machine</li> <li><code>vagrant destroy</code>: stops and delete the vagrant machine</li> <li><code>vagrant provision</code>: force the provisioners to be run again a virtual machine. Useful for updating the configuration of existing virtual machines. </li> </ul>"},{"location":"vagrant/#vagrant-first-steps-tutorial","title":"Vagrant first steps tutorial","text":"<p>Instructions to create a ubuntu virtual machine from scratch.</p> <ol> <li>Create a directory for your virtual machine configuration: <code>mkdir my-vm</code></li> <li>Move to the new directory: <code>cd my-vm</code></li> <li>Initialize a configuration file: <code>vagrant init</code></li> <li>Edit the new file 'Vagrantfile' deletig all commented lines: <code>nano Vagrantfile</code></li> </ol> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"base\"\nend\n</code></pre> <ol> <li>Launch a new virtual machine based on the current Vagrantfile: <code>vagrant up</code></li> </ol> <p>The proccess will fail due to a bad configuration. There's no \"base\" box.</p> <ol> <li>Edit the Vagrantfile. Change \"base\" for another valid box name (view boxes on Vagrant Cloud)</li> </ol> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"ubuntu/focal64\"\nend\n</code></pre> <ol> <li>Launch the new virtual machine again: <code>vagrant up</code></li> <li>Connect to the new virtual machine: <code>vagrant ssh</code></li> <li>Exit from the new virtual machine: <code>exit</code></li> <li>Shutdown the new vm: <code>vagrant halt</code></li> <li>Delete the vm: <code>vagrant destroy</code></li> </ol>"},{"location":"wsl/","title":"Wsl","text":"<p>WSL allows to run gnu/Linux distros in your Windows system.</p>"},{"location":"wsl/#installing","title":"Installing","text":"<p>Run installation from privileged user.</p> <p>Updates wsl and install default distro (ubuntu):</p> <p><code>wsl --install</code></p> <p>After restart, ask for a new user and pass.</p> <p>Check for instaled distros:</p> <p><code>wsl --list</code></p> <p>Access to new installed distro (ubuntu) <code>ubuntu</code></p>"},{"location":"yaml/","title":"Yaml","text":"<p>YAML: YAML Ain't Markup Language\u2122</p> <p>YAML is a human-readable data serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted.</p> <p>YAML Tutorial</p>"}]}